#!/usr/bin/env node

// Import dependencies
var createError = require('http-errors');
var express = require('express');
const cors = require('cors');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');
var crypto = require('crypto');
var debug = require('debug')('video-streaming-backend:server');
var http = require('http');

// Create Express app
var app = express();

// Create HTTP server first
var server = http.createServer(app);

// Initialize express-ws with both app and server
var expressWs = require('express-ws')(app, server);
console.log('WebSocket initialized:', !!expressWs);

// Load environment variables
require('dotenv').config();
const apiKey = process.env.API_KEY;
const apiSecret = process.env.API_SECRET;

// Initialize StreamChat
const StreamChat = require('stream-chat').StreamChat;
const serverClient = StreamChat.getInstance(apiKey, apiSecret);

// Store connected users
const connectedUsers = {};

// Set up port
var port = normalizePort(process.env.PORT || '3006');
app.set('port', port);

// CORS middleware
app.use(function(req, res, next) {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  res.header('Cross-Origin-Opener-Policy', 'same-origin-allow-popups');
  res.header('Cross-Origin-Embedder-Policy', 'require-corp');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  next();
});

// Standard middleware
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, '../public')));

// WebSocket endpoint
app.ws('/socket', function(ws, req) {
  let userId = null;
  
  console.log('Client connected to WebSocket');
  
  // Add error handler
  ws.on('error', function(error) {
    console.error('WebSocket error:', error);
  });
  
  ws.on('message', function(msg) {
    try {
      const data = JSON.parse(msg);
      console.log('WebSocket message received:', data);
      
      // Handle user registration
      if (data.type === 'register') {
        userId = data.userId;
        connectedUsers[userId] = ws;
        console.log(`User ${userId} registered with WebSocket`);
        // const userId = data.userId;
        const token = serverClient.createToken(userId);
        // Confirm registration to client
        ws.send(JSON.stringify({ 
          type: 'registered', 
          success: true,
          token:token

        }));
      }
      else if (data.type === 'call_canceled') {
        console.log('Handling call_canceled message');
        console.log('Looking for receiver:', data.receiverId);
        console.log('Current connected users:', Object.keys(connectedUsers));
        
        const receiverWs = connectedUsers[data.receiverId];
        if (receiverWs) {
          console.log('Found receiver, forwarding message');
          try {
            receiverWs.send(JSON.stringify(data));
            console.log('Message forwarded successfully');
          } catch (error) {
            console.error('Error forwarding message:', error);
          }
        } else {
          console.log('Receiver not found in connected users');
        }
      }
      // Handle call requests
      else if (data.type === 'call_request') {
        const { receiverId, callerId, callerName } = data;
        const receiverWs = connectedUsers[receiverId];
        // const userId = data.callerId;
        // const token = serverClient.createToken(userId);
        if (receiverWs) {
          // Send notification to receiver
          receiverWs.send(JSON.stringify({
            type: 'incoming_call',
            callerId,
            callerName
          }));
          
          // Notify caller that request was sent
          ws.send(JSON.stringify({
            type: 'call_status',
            status: 'ringing',
            receiverId,
            // token:token
          }));
          
          console.log(`Call request sent from ${callerId} to ${receiverId}`);
        } else {
          // Receiver not connected
          ws.send(JSON.stringify({
            type: 'call_status',
            status: 'unavailable',
            receiverId
          }));
          
          console.log(`Receiver ${receiverId} not connected`);
        }
      }
      
      // Handle call responses (accept/decline)
      else if (data.type === 'call_response') {
        const { callerId, response } = data;
        // const callerWs = connectedUsers[callerId];
        const receiverWs = connectedUsers[data.callerId];
        
        if(receiverWs){
          if (response==='accepted') {
            // const userId = data.userID;
            // const token = serverClient.createToken(userId);
            receiverWs.send(JSON.stringify({
              type: 'call_info',
              callID: data.callID,
              // token:token
            }));
            
            console.log(`Call ${response} by ${userId} to ${callerId}`);
          }
          else{
            // console.log("WS: ",ws);
            receiverWs.send(JSON.stringify({
              type: 'call_response',
              callerId,
              status:'declined',
              // weird: "I SHOULD BE HERE"
            }))
          }
        }
      }
      else if(data.type == "message_sent"){
        const receiverWs = connectedUsers[data.receiver];
        let newMessage = data.message;
        newMessage.isUser=false
        if(receiverWs){
          // console.log(receiverWs);
          receiverWs.send(JSON.stringify({
            type:"message_sent",
            message:newMessage,
            sender: data.sender,
            receiver:data.receiver
          }))
      }
    }
      
      
    } catch (e) {
      console.error('Error handling WebSocket message:', e);
    }
  });
  ws.on('close', function() {
    if (userId) {
      console.log(`User ${userId} disconnected from WebSocket`);
      delete connectedUsers[userId];
    }
  });
});

// Define routes
var indexRouter = require('../routes/index');
var usersRouter = require('../routes/users');
var createUserRouter = require('../routes/createUser');
var getChats = require('../routes/getChats');
var sendText = require('../routes/sendText');
var addUser = require('../routes/addUser');
var allUsers = require('../routes/getAllUsers');
var getUser = require('../routes/getUser');
var clearChats = require('../routes/clearUserChats');
var deleteUser = require('../routes/deleteUser')

// Register routes
app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/createUser', createUserRouter);
app.use('/getChats', getChats);
app.use('/sendText', sendText);
app.use('/addUser', addUser);
app.use('/allUsers', allUsers);
app.use('/getUser', getUser);
app.use('/clearChats',clearChats);
app.use('/deleteUser',deleteUser);
// Test message route
app.get('/test-message/:userId', (req, res) => {
  // existing code
});

// 404 handler
app.use(function(req, res, next) {
  next(createError(404));
});

// Error handler
app.use(function(err, req, res, next) {
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};
  res.status(err.status || 500);
  
  return res.json({
    error: err.message,
    status: err.status || 500
  });
});

// Start server
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Utility functions
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
    
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Server listening on ${bind}`);
}